/*
 * Copyright (c) Jan 11, 2017 Systematic Testing Ltd. (www.systematictesting.com) to Present..
 * All rights reserved. 
 */
package com.systematictesting.automation.core.client;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;

import com.systematictesting.automation.core.constants.FrameworkParams;
import com.systematictesting.automation.core.constants.SystemParams;
import com.systematictesting.automation.core.exceptions.MandatoryParameterException;
import com.systematictesting.automation.core.framework.Tracer;
import com.systematictesting.automation.core.framework.impl.SwingLoggingBasedTraceHandler;
import com.systematictesting.automation.core.utils.CommandLineParamsUtils;

/**
 *
 * @author sharad
 */
public class MainEntry extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form MainEntry
     */
    public MainEntry() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailAndApiKeyPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        emailAddressTextBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        apiKeyTextBox = new javax.swing.JTextField();
        SubmitButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        reportCollectorServerNameTextBox = new javax.swing.JTextField();
        proxyServerNameAndPortLabel = new javax.swing.JLabel();
        proxyServerNameAndPort = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        proxyForReportCollector = new javax.swing.JTextField();
        testSuiteInfoPanel = new javax.swing.JPanel();
        testSuiteLocation = new javax.swing.JLabel();
        siteNameTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        versionNumberTextbox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        suiteNameTextBox = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();
        browserComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tracerToggleButton = new javax.swing.JToggleButton();
        jLabel10 = new javax.swing.JLabel();
        alwaysTakeScreenshot = new javax.swing.JCheckBox();
        takeScreenshotWhenTestStepFailed = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        operatingSystemLabel = new javax.swing.JLabel();
        operatingSystemDropDown = new javax.swing.JComboBox<>();
        screenSizeLabel = new javax.swing.JLabel();
        screenWidthInPixel = new javax.swing.JTextField();
        screenWidth = new javax.swing.JLabel();
        screenHeightInPixel = new javax.swing.JTextField();
        screenHeight = new javax.swing.JLabel();
        videoRecorderAlwaysFlag = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        videoRecorderOnlyIfTestCaseFailed = new javax.swing.JCheckBox();
        logoPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        loggingScrollPane = new javax.swing.JScrollPane();
        loggerTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Email *");

        emailAddressTextBox.setToolTipText("Enter Email Address of Report Collector Server");
        emailAddressTextBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        emailAddressTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailAddressTextBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("API Key *");

        SubmitButton.setText("Run");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Report Collector Server URL *");

        reportCollectorServerNameTextBox.setText("http://qdos.systematictesting.com");
        reportCollectorServerNameTextBox.setToolTipText("");

        proxyServerNameAndPortLabel.setText("Proxy for Browser (server:port)");
        proxyServerNameAndPortLabel.setToolTipText("");

        jLabel12.setText("Proxy for Report Collector (server:port)");

        javax.swing.GroupLayout emailAndApiKeyPanelLayout = new javax.swing.GroupLayout(emailAndApiKeyPanel);
        emailAndApiKeyPanel.setLayout(emailAndApiKeyPanelLayout);
        emailAndApiKeyPanelLayout.setHorizontalGroup(
            emailAndApiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emailAndApiKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(emailAndApiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(proxyServerNameAndPort, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SubmitButton)
                    .addComponent(jLabel1)
                    .addComponent(emailAddressTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(apiKeyTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addComponent(proxyServerNameAndPortLabel)
                    .addComponent(reportCollectorServerNameTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jLabel12)
                    .addComponent(proxyForReportCollector))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        emailAndApiKeyPanelLayout.setVerticalGroup(
            emailAndApiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emailAndApiKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailAddressTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apiKeyTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proxyServerNameAndPortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proxyServerNameAndPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proxyForReportCollector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportCollectorServerNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubmitButton)
                .addContainerGap())
        );

        testSuiteLocation.setText("Site Name *");

        jLabel3.setText("Version Number *");

        jLabel4.setText("Suite Name (Optional - if not specified all suites will run)");

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        browserComboBox.setModel(new DefaultComboBoxModel(new String[]{FrameworkParams.BROWSER_CHROME,FrameworkParams.BROWSER_FIREFOX,FrameworkParams.BROWSER_HEADLESS}));

        jLabel8.setText("Browser *");

        jLabel7.setText("Tracer Window");

        tracerToggleButton.setSelected(true);
        tracerToggleButton.setText("ON");
        tracerToggleButton.setToolTipText("");
        tracerToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tracerToggleButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Capture Screenshot");

        alwaysTakeScreenshot.setText("Always");

        takeScreenshotWhenTestStepFailed.setText("Only if Test Step Failed");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        operatingSystemLabel.setText("Operating System *");

        operatingSystemDropDown.setModel(new DefaultComboBoxModel(new String[]{FrameworkParams.OS_WINDOWS_10,FrameworkParams.OS_WINDOWS_7,FrameworkParams.OS_MACOSX_10_12_1}));
        operatingSystemDropDown.setToolTipText("");

        screenSizeLabel.setText("Screen Size");

        screenWidth.setText("width X");

        screenHeight.setText("height");

        videoRecorderAlwaysFlag.setText("Always");

        jLabel6.setText("Capture Video");

        videoRecorderOnlyIfTestCaseFailed.setText("Only if Test Case Failed");

        javax.swing.GroupLayout testSuiteInfoPanelLayout = new javax.swing.GroupLayout(testSuiteInfoPanel);
        testSuiteInfoPanel.setLayout(testSuiteInfoPanelLayout);
        testSuiteInfoPanelLayout.setHorizontalGroup(
            testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(versionNumberTextbox)
                    .addComponent(siteNameTextBox)
                    .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                        .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(operatingSystemLabel))
                        .addGap(25, 25, 25)
                        .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(operatingSystemDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(browserComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(suiteNameTextBox)
                    .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                        .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(takeScreenshotWhenTestStepFailed)
                            .addComponent(saveButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExitButton))
                    .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                        .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tracerToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(testSuiteLocation)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                                        .addComponent(screenSizeLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(screenWidthInPixel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)
                                        .addComponent(screenWidth))
                                    .addComponent(alwaysTakeScreenshot)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(videoRecorderAlwaysFlag)
                                    .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                                        .addComponent(screenHeightInPixel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(screenHeight))
                                    .addComponent(videoRecorderOnlyIfTestCaseFailed))))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );
        testSuiteInfoPanelLayout.setVerticalGroup(
            testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testSuiteInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tracerToggleButton))
                .addGap(26, 26, 26)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operatingSystemLabel)
                    .addComponent(operatingSystemDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(browserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(testSuiteLocation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siteNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(versionNumberTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suiteNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alwaysTakeScreenshot)
                    .addComponent(videoRecorderAlwaysFlag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(takeScreenshotWhenTestStepFailed)
                    .addComponent(videoRecorderOnlyIfTestCaseFailed))
                .addGap(18, 18, 18)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(screenSizeLabel)
                    .addComponent(screenWidthInPixel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(screenWidth)
                    .addComponent(screenHeightInPixel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(screenHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(testSuiteInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExitButton)
                    .addComponent(saveButton)))
        );

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/systematictesting/automation/core/client/selfit.png"))); // NOI18N
        logoLabel.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Helvetica", 0, 65)); // NOI18N
        jLabel5.setText("QDOS");

        jLabel11.setText("Systematic Testing Ltd.");

        javax.swing.GroupLayout logoPanelLayout = new javax.swing.GroupLayout(logoPanel);
        logoPanel.setLayout(logoPanelLayout);
        logoPanelLayout.setHorizontalGroup(
            logoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(logoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(21, 21, 21))))
        );
        logoPanelLayout.setVerticalGroup(
            logoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logoPanelLayout.createSequentialGroup()
                .addGroup(logoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, logoPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        loggerTextArea.setEditable(false);
        loggerTextArea.setBackground(new java.awt.Color(0, 0, 0));
        loggerTextArea.setColumns(20);
        loggerTextArea.setFont(new java.awt.Font("Courier", 1, 14)); // NOI18N
        loggerTextArea.setForeground(new java.awt.Color(0, 255, 51));
        loggerTextArea.setLineWrap(true);
        loggerTextArea.setRows(5);
        loggerTextArea.setText("Tracer window...");
        loggerTextArea.setToolTipText("");
        loggingScrollPane.setViewportView(loggerTextArea);

        jPanel1.setBackground(new java.awt.Color(241, 83, 15));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailAndApiKeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testSuiteInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
            .addComponent(loggingScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(testSuiteInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailAndApiKeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loggingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailAddressTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailAddressTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailAddressTextBoxActionPerformed

    protected void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        boolean allMandatoryParametersValid = true;
        Tracer.getInstance().logEvents("Starting now...");
        if (this.apiKeyTextBox.getText()==null || this.apiKeyTextBox.getText().length()==0) {
            Tracer.getInstance().logEvents("API Key is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (this.emailAddressTextBox.getText()==null || this.emailAddressTextBox.getText().length()==0) {
            Tracer.getInstance().logEvents("Email is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (this.reportCollectorServerNameTextBox.getText()==null || this.reportCollectorServerNameTextBox.getText().length()==0) {
            Tracer.getInstance().logEvents("Report Collector Server Name is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (this.siteNameTextBox==null || this.siteNameTextBox.getText().length()==0) {
            Tracer.getInstance().logEvents("Site Name is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (this.versionNumberTextbox.getText()==null || this.versionNumberTextbox.getText().length()==0) {
            Tracer.getInstance().logEvents("Version Number is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (this.operatingSystemDropDown.getSelectedItem() == null || this.operatingSystemDropDown.getSelectedItem().toString().length()==0) {
            Tracer.getInstance().logEvents("Operating System Value is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (this.browserComboBox.getSelectedItem()==null || this.browserComboBox.getSelectedItem().toString().length()==0) {
            Tracer.getInstance().logEvents("Browser Value is a mandatory parameter.");
            allMandatoryParametersValid = false;
        }
        if (allMandatoryParametersValid) {
        	CommandLineParamsUtils.getInstance().setEmail(this.emailAddressTextBox.getText());
        	CommandLineParamsUtils.getInstance().setApiKey(this.apiKeyTextBox.getText());
            CommandLineParamsUtils.getInstance().setProxyUrl(System.getProperty(SystemParams.PROXY_URL) != null ? System.getProperty(SystemParams.PROXY_URL) : "");
            CommandLineParamsUtils.getInstance().setProxyForSReport(this.proxyForReportCollector.getText());
            CommandLineParamsUtils.getInstance().setReportCollectionServerName(this.reportCollectorServerNameTextBox.getText());
            CommandLineParamsUtils.getInstance().setBrowserName(this.browserComboBox.getSelectedItem().toString());
            CommandLineParamsUtils.getInstance().setOperatingSystem(this.operatingSystemDropDown.getSelectedItem().toString());
            CommandLineParamsUtils.getInstance().setSiteName(this.siteNameTextBox.getText());
            CommandLineParamsUtils.getInstance().setVersionNumber(this.versionNumberTextbox.getText());
            CommandLineParamsUtils.getInstance().setTestSuiteName(this.suiteNameTextBox.getText());
            CommandLineParamsUtils.getInstance().setTracerStatus("false");
            CommandLineParamsUtils.getInstance().setAlwaysCaptureScreenshot(this.alwaysTakeScreenshot.isSelected()+"");
            CommandLineParamsUtils.getInstance().setCaptureScreenshotOnFailedEvent(this.takeScreenshotWhenTestStepFailed.isSelected()+"");
            CommandLineParamsUtils.getInstance().setScreenHeightInPixel(this.screenHeightInPixel.getText());
            CommandLineParamsUtils.getInstance().setScreenWidthInPixel(this.screenWidthInPixel.getText());
            CommandLineParamsUtils.getInstance().setVideoRecorderAlwaysFlag(this.videoRecorderAlwaysFlag.isSelected()+"");
            CommandLineParamsUtils.getInstance().setVideoRecorderOnlyIfTestCaseFailed(this.videoRecorderOnlyIfTestCaseFailed.isSelected()+"");
            
            if (this.proxyServerNameAndPort.getText()!=null && this.proxyServerNameAndPort.getText().length()>0) {
                CommandLineParamsUtils.getInstance().setProxyUrl(this.proxyServerNameAndPort.getText());
            }
            activateCoreFrameworkInSeparateThread();
        } else {
            Tracer.getInstance().logEvents("Please try again...");
        }
    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void activateCoreFrameworkInSeparateThread() {
        try {
            Class<?> seleniumActivationThreadClass = getClass().getClassLoader().loadClass(getFrameworkActivationClass());
            Runnable instanceOfActivationProcess = (Runnable) seleniumActivationThreadClass.newInstance();
            ((com.systematictesting.automation.core.client.SeleniumActivationFrameworkThread) instanceOfActivationProcess).setAppProperties(appProperties);

            Thread seleniumThread = new Thread(instanceOfActivationProcess);
            seleniumThread.start();
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Tracer.getInstance().logEvents("Error occurred in initializing Core Framework. Please re-open the UI again. If problem persist, then please contact sharad@systematictesting.com");
            Logger.getLogger(MainEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getFrameworkActivationClass() {
        return frameworkActivationClass;
    }


    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void tracerToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tracerToggleButtonActionPerformed
        if (this.isTracerOn == false) {
            this.tracerToggleButton.setText("ON");
            this.isTracerOn = true;
            this.loggerTextArea.show();
            this.loggingScrollPane.show();
            System.out.println("JFrame : "+this.getSize());
            setSize(this.getSize().width, 663);
        } else {
            this.tracerToggleButton.setText("OFF");
            this.isTracerOn = false;
            this.loggerTextArea.hide();
            this.loggingScrollPane.hide();
            setSize(this.getSize().width, 500);
        }
    }//GEN-LAST:event_tracerToggleButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Map<String, String> configMap = new HashMap<String, String>();
        configMap.put("emailAddressTextBox", this.emailAddressTextBox.getText());
        configMap.put("apiKeyTextBox", this.apiKeyTextBox.getText());
        configMap.put("proxyServerNameAndPort", this.proxyServerNameAndPort.getText());
        configMap.put("proxyForReportCollector", this.proxyForReportCollector.getText());
        configMap.put("reportCollectorServerNameTextBox", this.reportCollectorServerNameTextBox.getText());
        configMap.put("browserComboBox", this.browserComboBox.getSelectedItem().toString());
        configMap.put("operatingSystemDropDown", this.operatingSystemDropDown.getSelectedItem().toString());
        configMap.put("siteNameTextBox", this.siteNameTextBox.getText());
        configMap.put("versionNumberTextbox", this.versionNumberTextbox.getText());
        configMap.put("suiteNameTextBox", this.suiteNameTextBox.getText());
        configMap.put("alwaysTakeScreenshot", this.alwaysTakeScreenshot.isSelected()+"");
        configMap.put("takeScreenshotWhenTestStepFailed", this.takeScreenshotWhenTestStepFailed.isSelected()+"");
        configMap.put("screenHeightInPixel", this.screenHeightInPixel.getText());
        configMap.put("screenWidthInPixel", this.screenWidthInPixel.getText());
        configMap.put("videoRecorderAlwaysFlag", this.videoRecorderAlwaysFlag.isSelected()+"");
        configMap.put("videoRecorderOnlyIfTestCaseFailed", this.videoRecorderOnlyIfTestCaseFailed.isSelected()+"");
        
        try {
            FileOutputStream fos = new FileOutputStream("configurations.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(configMap);
            oos.close();
            fos.close();
            log.info("Serialized HashMap data is saved in configurations.ser");
            Tracer.getInstance().logEvents("Configurations saved successfully.");
        } catch (IOException ioe) {
            Tracer.getInstance().logEvents("Error occurred while saving configurations. Please check access permission on Executable JAR file location.");
            log.severe(ioe.getMessage());
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        MainEntry objMainEntry = new MainEntry();
        
        Tracer.getInstance().setTraceHandler(new SwingLoggingBasedTraceHandler(objMainEntry.loggerTextArea));
        
        Map<String, String> configMap = readConfigurations();
        
        if (configMap != null) {
            Tracer.getInstance().logEvents("Configurations loaded successfully.");
            objMainEntry.emailAddressTextBox.setText(configMap.get("emailAddressTextBox"));
            objMainEntry.apiKeyTextBox.setText(configMap.get("apiKeyTextBox"));
            objMainEntry.proxyServerNameAndPort.setText(configMap.get("proxyServerNameAndPort"));
            objMainEntry.proxyForReportCollector.setText(configMap.get("proxyForReportCollector"));
            objMainEntry.reportCollectorServerNameTextBox.setText(configMap.get("reportCollectorServerNameTextBox"));
            objMainEntry.browserComboBox.setSelectedItem(configMap.get("browserComboBox"));
            objMainEntry.operatingSystemDropDown.setSelectedItem(configMap.get("operatingSystemDropDown"));
            objMainEntry.siteNameTextBox.setText(configMap.get("siteNameTextBox"));
            objMainEntry.versionNumberTextbox.setText(configMap.get("versionNumberTextbox"));
            objMainEntry.suiteNameTextBox.setText(configMap.get("suiteNameTextBox"));
            objMainEntry.alwaysTakeScreenshot.setSelected(Boolean.valueOf(configMap.get("alwaysTakeScreenshot")));
            objMainEntry.takeScreenshotWhenTestStepFailed.setSelected(Boolean.valueOf(configMap.get("takeScreenshotWhenTestStepFailed")));
            objMainEntry.screenHeightInPixel.setText(configMap.get("screenHeightInPixel"));
            objMainEntry.screenWidthInPixel.setText(configMap.get("screenWidthInPixel"));
            objMainEntry.videoRecorderAlwaysFlag.setSelected(Boolean.valueOf(configMap.get("videoRecorderAlwaysFlag")));
            objMainEntry.videoRecorderOnlyIfTestCaseFailed.setSelected(Boolean.valueOf(configMap.get("videoRecorderOnlyIfTestCaseFailed")));
        }
        try {
            CommandLineParamsUtils.getInstance().getApiKey();
            CommandLineParamsUtils.getInstance().getEmail();
            CommandLineParamsUtils.getInstance().getReportCollectionServerName();
            CommandLineParamsUtils.getInstance().getSiteName();
            CommandLineParamsUtils.getInstance().getVersionNumber();
            CommandLineParamsUtils.getInstance().getBrowserName();
            CommandLineParamsUtils.getInstance().getOperatingSystem();
            
            String mainFrameworkClass = appProperties.getProperty("framework.class");

            Class<?> frameworkClass = objMainEntry.getClass().getClassLoader().loadClass(mainFrameworkClass);
            com.systematictesting.automation.core.main.Framework instanceOfFramework = (com.systematictesting.automation.core.main.Framework) frameworkClass.newInstance();
            instanceOfFramework.activateTestingFramework();
        } catch (MandatoryParameterException e) {
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(objMainEntry);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            log.severe("Framework Class not found" + e.getStackTrace().toString());
        }
    }

    private static Map<String, String> readConfigurations() {
        Map<String, String> configMap = null;
        try {
            FileInputStream fis = new FileInputStream("configurations.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            configMap = (HashMap) ois.readObject();
            ois.close();
            fis.close();
        } catch (IOException | ClassNotFoundException ioe) {
            log.severe(ioe.getMessage());
        }
        return configMap;
    }

    public void run() {
        this.setVisible(true);
    }

    private static final long serialVersionUID = 1L;
    private boolean isTracerOn = true;
    private static final Logger log = Logger.getLogger(MainEntry.class.getName());
    protected static String frameworkActivationClass = "com.systematictesting.automation.core.client.SeleniumActivationFrameworkThread";
    private static final String CORE_CLIENT_CONFIG_FILE = "coreClient.properties";
    private static final String APP_CONFIG_FILE = "Application.properties";
    private static Properties appProperties = new Properties();
    private static Properties customProperties = new Properties();

    static {
        try {
            appProperties.load(MainEntry.class.getResourceAsStream(CORE_CLIENT_CONFIG_FILE));
            if (MainEntry.class.getResourceAsStream(APP_CONFIG_FILE) != null) {
                customProperties.load(MainEntry.class.getResourceAsStream(APP_CONFIG_FILE));
                appProperties.putAll(customProperties);
            }
        } catch (IOException e) {
            log.log(Level.SEVERE, e.getMessage(), e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JCheckBox alwaysTakeScreenshot;
    private javax.swing.JTextField apiKeyTextBox;
    private javax.swing.JComboBox browserComboBox;
    private javax.swing.JTextField emailAddressTextBox;
    private javax.swing.JPanel emailAndApiKeyPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea loggerTextArea;
    private javax.swing.JScrollPane loggingScrollPane;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JCheckBox videoRecorderOnlyIfTestCaseFailed;
    private javax.swing.JComboBox<String> operatingSystemDropDown;
    private javax.swing.JLabel operatingSystemLabel;
    private javax.swing.JTextField proxyForReportCollector;
    private javax.swing.JTextField proxyServerNameAndPort;
    private javax.swing.JLabel proxyServerNameAndPortLabel;
    private javax.swing.JTextField reportCollectorServerNameTextBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel screenHeight;
    private javax.swing.JTextField screenHeightInPixel;
    private javax.swing.JLabel screenSizeLabel;
    private javax.swing.JLabel screenWidth;
    private javax.swing.JTextField screenWidthInPixel;
    private javax.swing.JTextField siteNameTextBox;
    private javax.swing.JTextField suiteNameTextBox;
    private javax.swing.JCheckBox takeScreenshotWhenTestStepFailed;
    private javax.swing.JPanel testSuiteInfoPanel;
    private javax.swing.JLabel testSuiteLocation;
    private javax.swing.JToggleButton tracerToggleButton;
    private javax.swing.JTextField versionNumberTextbox;
    private javax.swing.JCheckBox videoRecorderAlwaysFlag;
    // End of variables declaration//GEN-END:variables
}
